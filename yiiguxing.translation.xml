<application>
  <component name="AppStorage">
    <histories>
      <item value="Reference queues, to which registered reference objects are appended by the&#10; * garbage collector after the appropriate reachability changes are detected." />
      <item value="volatile" />
      <item value="模拟" />
      <item value="Sneaky" />
      <item value="Entity Relation" />
      <item value="Walk Group Jump Overlap" />
      <item value="criteria" />
      <item value="&#10;&#9; * Specify whether {@code @Bean} methods should get proxied in order to enforce&#10;&#9; * bean lifecycle behavior, e.g. to return shared singleton bean instances even&#10;&#9; * in case of direct {@code @Bean} method calls in user code. This feature&#10;&#9; * requires method interception, implemented through a runtime-generated CGLIB&#10;&#9; * subclass which comes with limitations such as the configuration class and&#10;&#9; * its methods not being allowed to declare {@code final}.&#10;&#9; * &lt;p&gt;The default is {@code true}, allowing for 'inter-bean references' within&#10;&#9; * the configuration class as well as for external calls to this configuration's&#10;&#9; * {@code @Bean} methods, e.g. from another configuration class. If this is not&#10;&#9; * needed since each of this particular configuration's {@code @Bean} methods&#10;&#9; * is self-contained and designed as a plain factory method for container use,&#10;&#9; * switch this flag to {@code false} in order to avoid CGLIB subclass processing.&#10;&#9; * &lt;p&gt;Turning off bean method interception effectively processes {@code @Bean}&#10;&#9; * methods individually like when declared on non-{@code @Configuration} classes,&#10;&#9; * a.k.a. &quot;@Bean Lite Mode&quot; (see {@link Bean @Bean's javadoc}). It is therefore&#10;&#9; * behaviorally equivalent to removing the {@code @Configuration} stereotype.&#10;&#9; * @since 5.2" />
      <item value="&#9;/**&#10;&#9; * Specify whether {@code @Bean} methods should get proxied in order to enforce&#10;&#9; * bean lifecycle behavior, e.g. to return shared singleton bean instances even&#10;&#9; * in case of direct {@code @Bean} method calls in user code. This feature&#10;&#9; * requires method interception, implemented through a runtime-generated CGLIB&#10;&#9; * subclass which comes with limitations such as the configuration class and&#10;&#9; * its methods not being allowed to declare {@code final}.&#10;&#9; * &lt;p&gt;The default is {@code true}, allowing for 'inter-bean references' within&#10;&#9; * the configuration class as well as for external calls to this configuration's&#10;&#9; * {@code @Bean} methods, e.g. from another configuration class. If this is not&#10;&#9; * needed since each of this particular configuration's {@code @Bean} methods&#10;&#9; * is self-contained and designed as a plain factory method for container use,&#10;&#9; * switch this flag to {@code false} in order to avoid CGLIB subclass processing.&#10;&#9; * &lt;p&gt;Turning off bean method interception effectively processes {@code @Bean}&#10;&#9; * methods individually like when declared on non-{@code @Configuration} classes,&#10;&#9; * a.k.a. &quot;@Bean Lite Mode&quot; (see {@link Bean @Bean's javadoc}). It is therefore&#10;&#9; * behaviorally equivalent to removing the {@code @Configuration} stereotype.&#10;&#9; * @since 5.2" />
      <item value="&#9;/**&#10;&#9; * Convenient way to quickly register&#10;&#9; * {@link ConfigurationProperties @ConfigurationProperties} annotated beans with&#10;&#9; * Spring. Standard Spring Beans will also be scanned regardless of this value.&#10;&#9; * @return {@code @ConfigurationProperties} annotated beans to register&#10;&#9; */" />
      <item value="Interface to be implemented by types that determine which @Configuration class(es) should be imported based on a given selection criteria, usually one or more annotation attributes. An ImportSelector may implement any of the following Aware interfaces, and their respective methods will be called prior to selectImports(org.springframework.core.type.AnnotationMetadata):" />
      <item value="Interface to be implemented by types that determine which @Configuration class(es) should be imported based on a given selection criteria, usually one or more annotation attributes.&#10;An ImportSelector may implement any of the following Aware interfaces, and their respective methods will be called prior to selectImports(org.springframework.core.type.AnnotationMetadata):" />
      <item value="收货 地址" />
      <item value="收货地址" />
      <item value="posted address" />
      <item value="类别" />
      <item value="产品" />
      <item value="品种" />
      <item value="A variation of ImportSelector that runs after all @Configuration beans have been processed. This type of selector can be particularly useful when the selected imports are @Conditional. Implementations can also extend the Ordered interface or use the Order annotation to indicate a precedence against other DeferredImportSelectors. Implementations may also provide an import group which can provide additional sorting and filtering logic across different selectors." />
      <item value="A variation of ImportSelector that runs after all @Configuration beans have been processed. This type of selector can be particularly useful when the selected imports are @Conditional.&#10;Implementations can also extend the Ordered interface or use the Order annotation to indicate a precedence against other DeferredImportSelectors.&#10;Implementations may also provide an import group which can provide additional sorting and filtering logic across different selectors." />
      <item value="Outcome" />
      <item value="get Match Outcome" />
      <item value="public abstract boolean proxyBeanMethods Specify whether @Bean methods should get proxied in order to enforce bean lifecycle behavior, e.g. to return shared singleton bean instances even in case of direct @Bean method calls in user code. This feature requires method interception, implemented through a runtime-generated CGLIB subclass which comes with limitations such as the configuration class and its methods not being allowed to declare final. The default is true, allowing for 'inter-bean references' within the configuration class as well as for external calls to this configuration's @Bean methods, e.g. from another configuration class. If this is not needed since each of this particular configuration's @Bean methods is self-contained and designed as a plain factory method for container use, switch this flag to false in order to avoid CGLIB subclass processing. Turning off bean method interception effectively processes @Bean methods individually like when declared on non-@Configuration classes, a.k.a. &quot;@Bean Lite Mode&quot; (see @Bean's javadoc). It is therefore behaviorally equivalent to removing the @Configuration stereotype." />
      <item value="public abstract boolean proxyBeanMethods&#10;Specify whether @Bean methods should get proxied in order to enforce bean lifecycle behavior, e.g. to return shared singleton bean instances even in case of direct @Bean method calls in user code. This feature requires method interception, implemented through a runtime-generated CGLIB subclass which comes with limitations such as the configuration class and its methods not being allowed to declare final.&#10;The default is true, allowing for 'inter-bean references' within the configuration class as well as for external calls to this configuration's @Bean methods, e.g. from another configuration class. If this is not needed since each of this particular configuration's @Bean methods is self-contained and designed as a plain factory method for container use, switch this flag to false in order to avoid CGLIB subclass processing.&#10;Turning off bean method interception effectively processes @Bean methods individually like when declared on non-@Configuration classes, a.k.a. &quot;@Bean Lite Mode&quot; (see @Bean's javadoc). It is therefore behaviorally equivalent to removing the @Configuration stereotype." />
      <item value="Commit the given transaction, with regard to its status. If the transaction has been marked rollback-only programmatically, perform a rollback. If the transaction wasn't a new one, omit the commit for proper participation in the surrounding transaction. If a previous transaction has been suspended to be able to create a new one, resume the previous transaction after committing the new one. Note that when the commit call completes, no matter if normally or throwing an exception, the transaction must be fully completed and cleaned up. No rollback call should be expected in such a case. If this method throws an exception other than a TransactionException, then some before-commit error caused the commit attempt to fail. For example, an O/R Mapping tool might have tried to flush changes to the database right before commit, with the resulting DataAccessException causing the transaction to fail. The original exception will be propagated to the caller of this commit method in such a case." />
      <item value="Commit the given transaction, with regard to its status. If the transaction has been marked rollback-only programmatically, perform a rollback.&#10;If the transaction wasn't a new one, omit the commit for proper participation in the surrounding transaction. If a previous transaction has been suspended to be able to create a new one, resume the previous transaction after committing the new one.&#10;Note that when the commit call completes, no matter if normally or throwing an exception, the transaction must be fully completed and cleaned up. No rollback call should be expected in such a case.&#10;If this method throws an exception other than a TransactionException, then some before-commit error caused the commit attempt to fail. For example, an O/R Mapping tool might have tried to flush changes to the database right before commit, with the resulting DataAccessException causing the transaction to fail. The original exception will be propagated to the caller of this commit method in such a case." />
      <item value="&#9;/**&#10;&#9; * Commit the given transaction, with regard to its status. If the transaction&#10;&#9; * has been marked rollback-only programmatically, perform a rollback.&#10;&#9; * &lt;p&gt;If the transaction wasn't a new one, omit the commit for proper&#10;&#9; * participation in the surrounding transaction. If a previous transaction&#10;&#9; * has been suspended to be able to create a new one, resume the previous&#10;&#9; * transaction after committing the new one.&#10;&#9; * &lt;p&gt;Note that when the commit call completes, no matter if normally or&#10;&#9; * throwing an exception, the transaction must be fully completed and&#10;&#9; * cleaned up. No rollback call should be expected in such a case.&#10;&#9; * &lt;p&gt;If this method throws an exception other than a TransactionException,&#10;&#9; * then some before-commit error caused the commit attempt to fail. For&#10;&#9; * example, an O/R Mapping tool might have tried to flush changes to the&#10;&#9; * database right before commit, with the resulting DataAccessException&#10;&#9; * causing the transaction to fail. The original exception will be&#10;&#9; * propagated to the caller of this commit method in such a case." />
      <item value="regard" />
      <item value="后台" />
      <item value="后端" />
      <item value="A marker superinterface indicating that a bean is eligible to be notified by the Spring container of a particular framework object through a callback-style method. The actual method signature is determined by individual subinterfaces but should typically consist of just one void-returning method that accepts a single argument. Note that merely implementing Aware provides no default functionality. Rather, processing must be done explicitly, for example in a BeanPostProcessor. Refer to org.springframework.context.support.ApplicationContextAwareProcessor for an example of processing specific *Aware interface callbacks." />
      <item value="A marker superinterface indicating that a bean is eligible to be notified by the Spring container of a particular framework object through a callback-style method. The actual method signature is determined by individual subinterfaces but should typically consist of just one void-returning method that accepts a single argument.&#10;Note that merely implementing Aware provides no default functionality. Rather, processing must be done explicitly, for example in a BeanPostProcessor. Refer to org.springframework.context.support.ApplicationContextAwareProcessor for an example of processing specific *Aware interface callbacks." />
      <item value="amount" />
      <item value="mount" />
      <item value="country" />
      <item value="国家" />
      <item value="家庭" />
      <item value="famliy" />
      <item value="familiy" />
      <item value="controller" />
      <item value="control" />
      <item value="游标" />
      <item value="policy" />
      <item value="请求" />
      <item value="种类" />
      <item value="baned" />
      <item value="禁止" />
      <item value="取消的" />
      <item value="cancelled" />
      <item value="收货人" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="197" />
        <entry key="ENGLISH" value="198" />
        <entry key="DANISH" value="1" />
        <entry key="FRENCH" value="3" />
        <entry key="FILIPINO" value="1" />
        <entry key="SPANISH" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20190221000269386" />
        <option name="appKeyConfigured" value="true" />
      </app-key>
    </option>
    <option name="foldOriginal" value="true" />
    <option name="ignoreRegExp" value="" />
    <option name="keepFormat" value="true" />
    <option name="overrideFont" value="true" />
    <option name="phoneticFontFamily" value="DejaVu Sans Mono" />
    <option name="primaryFontFamily" value="Microsoft YaHei UI" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="391144569200f70a" />
        <option name="appKeyConfigured" value="true" />
      </youdao-translate>
    </option>
  </component>
</application>